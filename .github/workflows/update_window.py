import tkinter as tk
from tkinter import ttk
import random


class InteractiveUpdateWindow:
    def __init__(self):
        self.root = tk.Tk()
        self.root.title("–û–Ω–æ–≤–ª–µ–Ω–Ω—è")

        # –ü–æ–ª—É—á–∞–µ–º —Ä–∞–∑–º–µ—Ä—ã —ç–∫—Ä–∞–Ω–∞
        screen_width = self.root.winfo_screenwidth()
        screen_height = self.root.winfo_screenheight()

        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä—ã –æ–∫–Ω–∞
        window_width = 500
        window_height = 300

        # –í—ã—á–∏—Å–ª—è–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –¥–ª—è —Ü–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏—è –æ–∫–Ω–∞
        x = (screen_width - window_width) // 2
        y = (screen_height - window_height) // 2

        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ–∑–∏—Ü–∏—é –æ–∫–Ω–∞ –ø–æ —Ü–µ–Ω—Ç—Ä—É —ç–∫—Ä–∞–Ω–∞
        self.root.geometry(f"{window_width}x{window_height}+{x}+{y}")
        self.root.configure(bg='white')

        # –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã
        self.mouse_move_count = 0
        self.is_flashing = False
        self.flash_job = None
        self.move_job = None
        self.original_pos = (x, y)
        self.last_move_time = 0
        self.can_advance = True
        self.advance_job = None
        self.is_running_away = False
        self.screen_width = screen_width
        self.screen_height = screen_height
        self.run_away_job = None

        # –°–æ–∑–¥–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π —Ç–µ–∫—Å—Ç
        self.main_label = ttk.Label(
            self.root,
            text="–û–ù–û–í–õ–ï–ù–ù–Ø –ü–†–û–ì–†–ê–ú–ò!\n–û–ß–Ü–ö–£–ô–¢–ï!",
            font=("Arial", 16, "bold"),
            justify="center"
        )
        self.main_label.pack(pady=20)

        # –°–æ–∑–¥–∞–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–∞—é—â–∏–π —Ç–µ–∫—Å—Ç
        self.warning_label = tk.Label(
            self.root,
            text="–ù–ï –ß–Ü–ü–ê–ô –ú–ò–®–ö–£!",
            font=("Arial", 12, "bold"),
            fg="red",
            bg="white"
        )
        self.warning_label.pack(pady=10)

        # –ü—Ä–æ–≥—Ä–µ—Å—Å –±–∞—Ä (–¥–ª—è –∫—Ä–∞—Å–æ—Ç—ã)
        self.progress = ttk.Progressbar(
            self.root,
            mode='indeterminate',
            length=300
        )
        self.progress.pack(pady=20)
        self.progress.start(10)

        # –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º —Å–æ–±—ã—Ç–∏—è –º—ã—à–∏
        self.root.bind('<Motion>', self.on_mouse_move)
        self.root.bind('<Button-1>', self.on_mouse_click)

        # –î–µ–ª–∞–µ–º –æ–∫–Ω–æ –≤—Å–µ–≥–¥–∞ –ø–æ–≤–µ—Ä—Ö –¥—Ä—É–≥–∏—Ö
        self.root.attributes('-topmost', True)

    def on_mouse_move(self, event):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–≤–∏–∂–µ–Ω–∏—è –º—ã—à–∏"""
        import time

        # –ï—Å–ª–∏ –æ–∫–Ω–æ —É–±–µ–≥–∞–µ—Ç, –Ω–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ–±—ã—á–Ω—É—é –ª–æ–≥–∏–∫—É
        if self.is_running_away:
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–µ–º –ª–∏ –º—ã –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—å—Å—è –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π —ç—Ç–∞–ø
        if not self.can_advance:
            return

        current_time = time.time()

        # –ï—Å–ª–∏ –ø—Ä–æ—à–ª–æ –º–µ–Ω—å—à–µ 5 —Å–µ–∫—É–Ω–¥ —Å –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –¥–≤–∏–∂–µ–Ω–∏—è, –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º
        if current_time - self.last_move_time < 5.0 and self.mouse_move_count > 0:
            return

        self.last_move_time = current_time
        self.mouse_move_count += 1
        self.can_advance = False  # –ë–ª–æ–∫–∏—Ä—É–µ–º –ø—Ä–æ–¥–≤–∏–∂–µ–Ω–∏–µ

        if self.mouse_move_count == 1:
            self.first_warning()
        elif self.mouse_move_count == 2:
            self.second_warning()
        elif self.mouse_move_count == 3:
            self.third_warning()
        elif self.mouse_move_count == 4:
            self.fourth_warning()
        elif self.mouse_move_count == 5:
            self.fifth_warning()
        elif self.mouse_move_count >= 6:
            self.final_chaos()

        # –†–∞–∑–±–ª–æ–∫–∏—Ä—É–µ–º –ø—Ä–æ–¥–≤–∏–∂–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥
        self.advance_job = self.root.after(5000, self.enable_advance)

    def enable_advance(self):
        """–†–∞–∑—Ä–µ—à–∞–µ—Ç –ø–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π —ç—Ç–∞–ø"""
        self.can_advance = True

    def on_mouse_click(self, event):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –º—ã—à–∏"""
        # –ï—Å–ª–∏ –æ–∫–Ω–æ —É–±–µ–≥–∞–µ—Ç, –±–ª–æ–∫–∏—Ä—É–µ–º –≤—Å–µ –∫–ª–∏–∫–∏
        if self.is_running_away:
            return
        # –ö–ª–∏–∫ —Ç–æ–∂–µ —Å—á–∏—Ç–∞–µ—Ç—Å—è –∫–∞–∫ –¥–≤–∏–∂–µ–Ω–∏–µ, –Ω–æ –Ω–µ —É—Å–∫–æ—Ä—è–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å
        self.on_mouse_move(event)

    def first_warning(self):
        """–ü–µ—Ä–≤–æ–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ"""
        self.warning_label.config(
            text="–Ø –°–ö–ê–ó–ê–í –ú–ò–®–ö–£ –ü–û–ö–õ–ê–î–ò!\n(–ü–æ—á–µ–∫–∞–π 5 —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ –Ω–∞—Å—Ç—É–ø–Ω–∏–º —Ä—É—Ö–æ–º)",
            fg="red",
            font=("Arial", 12, "bold")
        )
        self.root.configure(bg='#ffeeee')

    def second_warning(self):
        """–í—Ç–æ—Ä–æ–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ —Å –º–æ—Ä–≥–∞–Ω–∏–µ–º"""
        self.warning_label.config(
            text="–Ø–ö–©–û –©–ï –†–ê–ó –î–û–¢–û–†–ö–ù–ï–®–°–Ø, –Ø –û–ë–†–ê–ó–ñ–£–°–Ø!\n(–°–µ—Ä–π–æ–∑–Ω–æ, –ø–æ—á–µ–∫–∞–π 5 —Å–µ–∫—É–Ω–¥!)",
            font=("Arial", 14, "bold")
        )
        self.start_flashing()

    def third_warning(self):
        """–¢—Ä–µ—Ç—å–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ"""
        self.stop_flashing()
        self.warning_label.config(
            text="–í–°–ï! –Ø –û–ë–†–ê–ó–ò–í–°–Ø! üò†",
            fg="darkred",
            font=("Arial", 18, "bold")
        )
        self.root.configure(bg='#ffcccc')

    def fourth_warning(self):
        """–ß–µ—Ç–≤–µ—Ä—Ç–æ–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ —Å —Ç—Ä—è—Å–∫–æ–π"""
        self.warning_label.config(
            text="–î–û–°–ò–¢–¨ –ú–ï–ù–ï –ó–õ–ò–¢–ò! üò°üí¢",
            font=("Arial", 20, "bold")
        )
        self.start_shaking()

    def fifth_warning(self):
        """–ü—è—Ç–æ–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ"""
        self.stop_shaking()
        self.warning_label.config(
            text="–û–°–¢–ê–ù–ù–Ñ –ü–û–ü–ï–†–ï–î–ñ–ï–ù–ù–Ø! ‚ö†Ô∏è",
            fg="red",
            font=("Arial", 22, "bold")
        )
        self.root.configure(bg='red')
        self.main_label.config(background='red', foreground='white')

    def final_chaos(self):
        """–§–∏–Ω–∞–ª—å–Ω—ã–π —Ö–∞–æ—Å"""
        chaos_messages = [
            "–í–°–ï! –¢–ò –ú–ï–ù–ï –î–û–í–Ü–í! ü§¨",
            "–ó–ê–†–ê–ó –Ø –†–û–ó–ö–ê–ñ–£ –¢–í–û–á–ô –ú–ê–ú–Ü! üìû",
            "–í–ò–î–ê–õ–Ø–Æ –í–°–Ü –¢–í–û–á \n–§–ê–ô–õ–ò... –Ü –Ø –ù–ï –ñ–ê–†–¢–£–Æ! üòà",
            "–°–ï–†–ô–û–ó–ù–û, –ó–£–ü–ò–ù–ò–°–Ø, \n–ú–ï–ù–Ü –í–ñ–ï –ù–ï–ú–ê –ß–¢–û–ì–û –í–ò–î–ê–õ–Ø–¢–ò! üõë",
            "–ì–ê–†–ê–ó–î, –¢–ò –ü–ï–†–ï–ú–Ü–ì... –Ø –ó–î–ê–Æ–°–Ø üò≠",
            "–î–û–ë–†–ï, –î–ê–í–ê–ô –î–†–£–ñ–ò–¢–ò? ü§ù"
        ]

        message_index = min(self.mouse_move_count - 6, len(chaos_messages) - 1)
        self.warning_label.config(
            text=chaos_messages[message_index],
            font=("Arial", 16, "bold")
        )

        # –ù–∞ —ç—Ç–∞–ø–µ "—É–¥–∞–ª–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤" - –æ–∫–Ω–æ –Ω–∞—á–∏–Ω–∞–µ—Ç —É–±–µ–≥–∞—Ç—å
        if self.mouse_move_count == 8:  # "–í–ò–î–ê–õ–Ø–Æ –í–°–Ü –¢–í–û–á –§–ê–ô–õ–ò"
            self.start_running_away()

        # –°–ª—É—á–∞–π–Ω—ã–π —Ü–≤–µ—Ç —Ñ–æ–Ω–∞
        colors = ['red', 'orange', 'yellow', 'green', 'blue', 'purple']
        self.root.configure(bg=random.choice(colors))

        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º "–ø—Ä–∏–º–∏—Ä–µ–Ω–∏–µ"
        if self.mouse_move_count >= 12:
            self.reconciliation()

    def reconciliation(self):
        """–ü—Ä–∏–º–∏—Ä–µ–Ω–∏–µ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º"""
        self.stop_all_effects()
        self.root.configure(bg='lightgreen')
        self.main_label.config(
            text="–û–ù–û–í–õ–ï–ù–ù–Ø –ó–ê–í–ï–†–®–ï–ù–û! ‚úÖ\n–î–Ø–ö–£–Æ –ó–ê –¢–ï–†–ü–Ü–ù–ù–Ø! üòä",
            background='lightgreen'
        )
        self.warning_label.config(
            text="–ú–∏ —Ç–µ–ø–µ—Ä –¥—Ä—É–∑—ñ! ü§ó",
            fg="green",
            bg="lightgreen",
            font=("Arial", 14, "bold")
        )

        # –ë–µ–∑–æ–ø–∞—Å–Ω–æ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏ —É–¥–∞–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä
        try:
            if self.progress and self.progress.winfo_exists():
                self.progress.stop()
                self.progress.destroy()
        except:
            pass

        # –ö–Ω–æ–ø–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è
        close_btn = tk.Button(
            self.root,
            text="–ó–∞–∫—Ä–∏—Ç–∏",
            command=self.root.destroy,
            font=("Arial", 12),
            bg="white"
        )
        close_btn.pack(pady=20)

    def start_flashing(self):
        """–ó–∞–ø—É—Å–∫ —ç—Ñ—Ñ–µ–∫—Ç–∞ –º–∏–≥–∞–Ω–∏—è"""
        if not self.is_flashing:
            self.is_flashing = True
            self.flash()

    def flash(self):
        """–≠—Ñ—Ñ–µ–∫—Ç –º–∏–≥–∞–Ω–∏—è —ç–∫—Ä–∞–Ω–∞"""
        if self.is_flashing:
            current_color = self.root.cget('bg')
            new_color = 'red' if current_color != 'red' else 'white'
            self.root.configure(bg=new_color)
            self.flash_job = self.root.after(200, self.flash)

    def stop_flashing(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–∏–≥–∞–Ω–∏—è"""
        self.is_flashing = False
        if self.flash_job:
            self.root.after_cancel(self.flash_job)

    def start_shaking(self):
        """–ó–∞–ø—É—Å–∫ —ç—Ñ—Ñ–µ–∫—Ç–∞ —Ç—Ä—è—Å–∫–∏ –æ–∫–Ω–∞"""
        self.shake_window()

    def shake_window(self):
        """–≠—Ñ—Ñ–µ–∫—Ç —Ç—Ä—è—Å–∫–∏ –æ–∫–Ω–∞"""
        if self.mouse_move_count == 4:  # –¢—Ä—è—Å—Ç–∏ —Ç–æ–ª—å–∫–æ –Ω–∞ 4-–º —ç—Ç–∞–ø–µ
            x_offset = random.randint(-10, 10)
            y_offset = random.randint(-10, 10)
            new_x = self.original_pos[0] + x_offset
            new_y = self.original_pos[1] + y_offset
            self.root.geometry(f"500x300+{new_x}+{new_y}")
            self.move_job = self.root.after(50, self.shake_window)

    def stop_shaking(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç—Ä—è—Å–∫–∏"""
        if self.move_job:
            self.root.after_cancel(self.move_job)
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ–∫–Ω–æ –≤ —Ü–µ–Ω—Ç—Ä
        self.root.geometry(f"500x300+{self.original_pos[0]}+{self.original_pos[1]}")

    def start_running_away(self):
        """–ó–∞–ø—É—Å–∫ —Ä–µ–∂–∏–º–∞ —É–±–µ–≥–∞–Ω–∏—è –æ—Ç –º—ã—à–∏"""
        self.is_running_away = True
        self.warning_label.config(
            text="–°–ü–†–û–ë–£–ô –ú–ï–ù–ï –ü–Ü–ô–ú–ê–¢–ò! üèÉ‚Äç‚ôÇÔ∏èüí®\n(–Ø –í–¢–Ü–ö–ê–Æ –í–Ü–î –¢–í–û–Ñ–á –ú–ò–®–ö–ò!)",
            fg="yellow",
            bg="darkred",
            font=("Arial", 14, "bold")
        )
        self.root.configure(bg='darkred')
        self.run_away_from_mouse()

        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —É–±–µ–≥–∞–Ω–∏–µ —á–µ—Ä–µ–∑ 10 —Å–µ–∫—É–Ω–¥
        self.root.after(10000, self.stop_running_away_and_continue)

    def run_away_from_mouse(self):
        """–£–±–µ–≥–∞–Ω–∏–µ –æ—Ç –º—ã—à–∏"""
        if not self.is_running_away:
            return

        try:
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–∑–∏—Ü–∏—é –º—ã—à–∏ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ —ç–∫—Ä–∞–Ω–∞
            mouse_x = self.root.winfo_pointerx()
            mouse_y = self.root.winfo_pointery()

            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –ø–æ–∑–∏—Ü–∏—é –æ–∫–Ω–∞
            window_x = self.root.winfo_x()
            window_y = self.root.winfo_y()
            window_center_x = window_x + 250  # —Ü–µ–Ω—Ç—Ä –æ–∫–Ω–∞ –ø–æ X
            window_center_y = window_y + 150  # —Ü–µ–Ω—Ç—Ä –æ–∫–Ω–∞ –ø–æ Y

            # –í—ã—á–∏—Å–ª—è–µ–º —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –æ—Ç –º—ã—à–∏ –¥–æ —Ü–µ–Ω—Ç—Ä–∞ –æ–∫–Ω–∞
            distance_x = window_center_x - mouse_x
            distance_y = window_center_y - mouse_y
            distance = (distance_x ** 2 + distance_y ** 2) ** 0.5

            # –ï—Å–ª–∏ –º—ã—à—å –±–ª–∏–∑–∫–æ (–º–µ–Ω—å—à–µ 200 –ø–∏–∫—Å–µ–ª–µ–π), —É–±–µ–≥–∞–µ–º
            if distance < 200:
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —É–±–µ–≥–∞–Ω–∏—è (–≤ –ø—Ä–æ—Ç–∏–≤–æ–ø–æ–ª–æ–∂–Ω—É—é —Å—Ç–æ—Ä–æ–Ω—É –æ—Ç –º—ã—à–∏)
                if distance_x >= 0:
                    new_x = window_x + 80  # –£–±–µ–≥–∞–µ–º –≤–ø—Ä–∞–≤–æ
                else:
                    new_x = window_x - 80  # –£–±–µ–≥–∞–µ–º –≤–ª–µ–≤–æ

                if distance_y >= 0:
                    new_y = window_y + 80  # –£–±–µ–≥–∞–µ–º –≤–Ω–∏–∑
                else:
                    new_y = window_y - 80  # –£–±–µ–≥–∞–µ–º –≤–≤–µ—Ä—Ö

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥—Ä–∞–Ω–∏—Ü—ã —ç–∫—Ä–∞–Ω–∞ –∏ —Ç–µ–ª–µ–ø–æ—Ä—Ç–∏—Ä—É–µ–º—Å—è –Ω–∞ –ø—Ä–æ—Ç–∏–≤–æ–ø–æ–ª–æ–∂–Ω—É—é —Å—Ç–æ—Ä–æ–Ω—É
                if new_x < 0:
                    new_x = self.screen_width - 520
                elif new_x > self.screen_width - 500:
                    new_x = 20

                if new_y < 0:
                    new_y = self.screen_height - 320
                elif new_y > self.screen_height - 300:
                    new_y = 20

                # –ü–µ—Ä–µ–º–µ—â–∞–µ–º –æ–∫–Ω–æ
                self.root.geometry(f"500x300+{new_x}+{new_y}")

            # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –º—ã—à–∏
            if self.is_running_away:
                self.run_away_job = self.root.after(30, self.run_away_from_mouse)

        except Exception:
            # –ï—Å–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —É–±–µ–≥–∞–Ω–∏–µ
            self.stop_running_away()

    def stop_running_away(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ —É–±–µ–≥–∞–Ω–∏—è"""
        self.is_running_away = False
        if self.run_away_job:
            self.root.after_cancel(self.run_away_job)

    def stop_running_away_and_continue(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ —É–±–µ–≥–∞–Ω–∏—è –∏ –ø–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —ç—Ç–∞–ø—É"""
        self.stop_running_away()
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ–∫–Ω–æ –≤ —Ü–µ–Ω—Ç—Ä
        self.root.geometry(f"500x300+{self.original_pos[0]}+{self.original_pos[1]}")

        # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ª–µ–¥—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        self.mouse_move_count += 1
        self.can_advance = True

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ª–µ–¥—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ chaos_messages
        if self.mouse_move_count < 12:
            self.final_chaos()
        else:
            self.reconciliation()

    def stop_all_effects(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Å–µ—Ö —ç—Ñ—Ñ–µ–∫—Ç–æ–≤"""
        self.stop_flashing()
        self.stop_shaking()
        self.stop_running_away()
        if self.advance_job:
            self.root.after_cancel(self.advance_job)

    def run(self):
        """–ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
        self.root.mainloop()


# –ó–∞–ø—É—Å–∫ –ø—Ä–æ–≥—Ä–∞–º–º—ã
if __name__ == "__main__":
    app = InteractiveUpdateWindow()
    app.run()
